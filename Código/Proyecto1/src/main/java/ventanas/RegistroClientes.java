/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ventanas;

// importar librerías de swing
import java.awt.Color;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.table.DefaultTableModel;
import java.util.Date;

// Importar las clases de lógica:
import com.mycompany.proyecto1.Archivo;
import com.mycompany.proyecto1.Validador;
import com.mycompany.proyecto1.Utilidades;
import com.fasterxml.jackson.databind.JsonNode;



// Importar las clases de objetos:
import com.mycompany.proyecto1.TipoProducto;
import com.mycompany.proyecto1.Producto;
import com.mycompany.proyecto1.Cliente;
import java.text.SimpleDateFormat;


/**
 *
 * @author noe
 */
public class RegistroClientes extends javax.swing.JFrame {

    /**
     * Creates new form MenuOpciones
     */
    
    private JsonNode provinciasData; // Variable para almacenar los datos del JSON
    
    public RegistroClientes() {
        initComponents();
        cargarProvinciasCantonesDistritos();
        configurarListeners();
        

        // Aplicar el efecto hover y selección a los botones (TOOLBAR)
        ButtonHoverEffect.applySelectableHoverEffect(agregar_cliente);
        ButtonHoverEffect.applySelectableHoverEffect(modificar_cliente);
        ButtonHoverEffect.applySelectableHoverEffect(salir);


        // Define los colores
        Color hoverColor = new Color(150,150,150); // Gris claro (al pasar el cursor)
        Color originalColor = Color.BLACK; // Negro (borde inicial)

        // Crear la instancia de ButtonHoverEffect para el efecto
        ButtonHoverEffect hoverEffect = new ButtonHoverEffect(hoverColor, originalColor);

        // Aplica el efecto hover a cada botón (Agregar Producto)
        hoverEffect.applyTo(crear_usuario);
        hoverEffect.applyTo(guardar_cliente);
        
        // Aplica el efecto hover a cada botón (Modificar Productoi)
        hoverEffect.applyTo(button_buscar_modificar);
        

        // Registrar los paneles en el CardLayout
        SubFrameContainer.add(agregarPanel, "agregarPanel");
        SubFrameContainer.add(modificarPanel, "modificarPanel");

        // Ocultar los paneles de opcion de "agregar productos"
        opcionesAgregarCliente.setVisible(false);
        
        
        // Mostrar la bienvenida al inicio
        SubFrameContainer.add(bienvenidaPanel, "bienvenidaPanel");
        java.awt.CardLayout layout = (java.awt.CardLayout) SubFrameContainer.getLayout();
        layout.show(SubFrameContainer, "bienvenidaPanel");
        
        // Configurar el campo de fecha de nacimiento
        Validador.configurarCampoFechaNacimiento(formatt_fecha_nacimiento);

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        funciones = new javax.swing.JToolBar();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        agregar_cliente = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        modificar_cliente = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        salir = new javax.swing.JButton();
        SubFrameContainer = new javax.swing.JPanel();
        bienvenidaPanel = new javax.swing.JPanel();
        bienvenidaLabel = new javax.swing.JLabel();
        bienvenidaLabel1 = new javax.swing.JLabel();
        usuario_icon = new javax.swing.JLabel();
        agregarPanel = new javax.swing.JPanel();
        crear_usuario = new javax.swing.JButton();
        opcionesAgregarCliente = new javax.swing.JPanel();
        codigo_defectoCliente = new javax.swing.JLabel();
        box_codigo_cliente = new javax.swing.JTextField();
        nombre_cliente = new javax.swing.JLabel();
        box_nombre_cliente = new javax.swing.JTextField();
        guardar_cliente = new javax.swing.JButton();
        num_telefono = new javax.swing.JLabel();
        box_num_telefono = new javax.swing.JTextField();
        correo_cliente = new javax.swing.JLabel();
        box_correo_cliente = new javax.swing.JTextField();
        distrito = new javax.swing.JLabel();
        jComboBox_provincias = new javax.swing.JComboBox<>();
        provincia1 = new javax.swing.JLabel();
        jComboBox_distritos = new javax.swing.JComboBox<>();
        fecha_nacimiento = new javax.swing.JLabel();
        formatt_fecha_nacimiento = new javax.swing.JFormattedTextField();
        cantones = new javax.swing.JLabel();
        jComboBox_cantones = new javax.swing.JComboBox<>();
        modificarPanel = new javax.swing.JPanel();
        filtro_agregar = new javax.swing.JLabel();
        combo_filtro_agregar = new javax.swing.JComboBox<>();
        buscador_agregar = new javax.swing.JTextField();
        button_buscar_modificar = new javax.swing.JButton();
        text_buscar_agregar = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_resultado = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1000, 800));
        setResizable(false);
        setSize(new java.awt.Dimension(1000, 800));

        funciones.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        funciones.setFloatable(false);
        funciones.setRollover(true);

        jSeparator1.setEnabled(false);
        jSeparator1.setRequestFocusEnabled(false);
        jSeparator1.setSeparatorSize(new java.awt.Dimension(250, 10));
        funciones.add(jSeparator1);

        agregar_cliente.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        agregar_cliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/add_item.png"))); // NOI18N
        agregar_cliente.setText("Agregar Cliente");
        agregar_cliente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        agregar_cliente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        agregar_cliente.setFocusable(false);
        agregar_cliente.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        agregar_cliente.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        agregar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregar_clienteActionPerformed(evt);
            }
        });
        funciones.add(agregar_cliente);

        jSeparator2.setSeparatorSize(new java.awt.Dimension(25, 10));
        funciones.add(jSeparator2);

        modificar_cliente.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        modificar_cliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/modify.png"))); // NOI18N
        modificar_cliente.setText("Modificar/eliminar cliente");
        modificar_cliente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        modificar_cliente.setFocusable(false);
        modificar_cliente.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modificar_cliente.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modificar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificar_clienteActionPerformed(evt);
            }
        });
        funciones.add(modificar_cliente);

        jSeparator5.setSeparatorSize(new java.awt.Dimension(25, 10));
        funciones.add(jSeparator5);

        salir.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/exit.png"))); // NOI18N
        salir.setText("Regresar al menú");
        salir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        salir.setFocusable(false);
        salir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        salir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });
        funciones.add(salir);

        SubFrameContainer.setLayout(new java.awt.CardLayout());

        bienvenidaLabel.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        bienvenidaLabel.setText("¡Bienvenido al menú de registro de clientes!");

        bienvenidaLabel1.setFont(new java.awt.Font("Century Gothic", 0, 36)); // NOI18N
        bienvenidaLabel1.setText("Elija una opción para comenzar");

        usuario_icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/users-alt.png"))); // NOI18N

        javax.swing.GroupLayout bienvenidaPanelLayout = new javax.swing.GroupLayout(bienvenidaPanel);
        bienvenidaPanel.setLayout(bienvenidaPanelLayout);
        bienvenidaPanelLayout.setHorizontalGroup(
            bienvenidaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bienvenidaPanelLayout.createSequentialGroup()
                .addGroup(bienvenidaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bienvenidaPanelLayout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(bienvenidaLabel1))
                    .addGroup(bienvenidaPanelLayout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(bienvenidaLabel))
                    .addGroup(bienvenidaPanelLayout.createSequentialGroup()
                        .addGap(436, 436, 436)
                        .addComponent(usuario_icon)))
                .addContainerGap(127, Short.MAX_VALUE))
        );
        bienvenidaPanelLayout.setVerticalGroup(
            bienvenidaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bienvenidaPanelLayout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(bienvenidaLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bienvenidaLabel1)
                .addGap(18, 18, 18)
                .addComponent(usuario_icon, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(382, Short.MAX_VALUE))
        );

        SubFrameContainer.add(bienvenidaPanel, "card2");

        crear_usuario.setFont(new java.awt.Font("Century Gothic", 3, 18)); // NOI18N
        crear_usuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/add-user.png"))); // NOI18N
        crear_usuario.setText("Agregar cliente");
        crear_usuario.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        crear_usuario.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        crear_usuario.setFocusable(false);
        crear_usuario.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        crear_usuario.setIconTextGap(10);
        crear_usuario.setMaximumSize(new java.awt.Dimension(361, 79));
        crear_usuario.setMinimumSize(new java.awt.Dimension(361, 79));
        crear_usuario.setPreferredSize(new java.awt.Dimension(361, 79));
        crear_usuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crear_usuarioActionPerformed(evt);
            }
        });

        opcionesAgregarCliente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        codigo_defectoCliente.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        codigo_defectoCliente.setText("Código");

        box_codigo_cliente.setEditable(false);
        box_codigo_cliente.setBackground(new java.awt.Color(255, 255, 255));
        box_codigo_cliente.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        box_codigo_cliente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        box_codigo_cliente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        box_codigo_cliente.setEnabled(false);
        box_codigo_cliente.setFocusable(false);
        box_codigo_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box_codigo_clienteActionPerformed(evt);
            }
        });

        nombre_cliente.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        nombre_cliente.setText("Nombre y apellidos del cliente");

        box_nombre_cliente.setBackground(new java.awt.Color(255, 255, 255));
        box_nombre_cliente.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        box_nombre_cliente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        box_nombre_cliente.setText(" ");
        box_nombre_cliente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        box_nombre_cliente.setSelectionColor(new java.awt.Color(0, 0, 0));
        box_nombre_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box_nombre_clienteActionPerformed(evt);
            }
        });

        guardar_cliente.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        guardar_cliente.setText("G U A R D A R");
        guardar_cliente.setBorder(null);
        guardar_cliente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        guardar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar_clienteActionPerformed(evt);
            }
        });

        num_telefono.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        num_telefono.setText("Teléfono");

        box_num_telefono.setBackground(new java.awt.Color(255, 255, 255));
        box_num_telefono.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        box_num_telefono.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        box_num_telefono.setText(" ");
        box_num_telefono.setToolTipText("");
        box_num_telefono.setActionCommand("<Not Set>");
        box_num_telefono.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        box_num_telefono.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        box_num_telefono.setSelectionColor(new java.awt.Color(0, 0, 0));
        box_num_telefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box_num_telefonoActionPerformed(evt);
            }
        });

        correo_cliente.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        correo_cliente.setText("Correo electronico");

        box_correo_cliente.setBackground(new java.awt.Color(255, 255, 255));
        box_correo_cliente.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        box_correo_cliente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        box_correo_cliente.setText("  Ejemplo: juan@gmail.com");
        box_correo_cliente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        box_correo_cliente.setSelectionColor(new java.awt.Color(0, 0, 0));
        box_correo_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box_correo_clienteActionPerformed(evt);
            }
        });

        distrito.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        distrito.setText("Distrito");

        jComboBox_provincias.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox_provincias.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jComboBox_provincias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alajuela", "Cartago", "Guanacaste", "Heredia", "Limón", "Punatrenas", "San José" }));
        jComboBox_provincias.setToolTipText("");
        jComboBox_provincias.setFocusable(false);
        jComboBox_provincias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_provinciasActionPerformed(evt);
            }
        });

        provincia1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        provincia1.setText("Provincia");

        jComboBox_distritos.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox_distritos.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jComboBox_distritos.setMaximumRowCount(84);
        jComboBox_distritos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox_distritos.setToolTipText("");
        jComboBox_distritos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_distritosActionPerformed(evt);
            }
        });

        fecha_nacimiento.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        fecha_nacimiento.setText("Fecha de nacimiento:");

        formatt_fecha_nacimiento.setBackground(new java.awt.Color(255, 255, 255));
        formatt_fecha_nacimiento.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        formatt_fecha_nacimiento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        formatt_fecha_nacimiento.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        formatt_fecha_nacimiento.setToolTipText("");
        formatt_fecha_nacimiento.setActionCommand("<Not Set>");
        formatt_fecha_nacimiento.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        formatt_fecha_nacimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatt_fecha_nacimientoActionPerformed(evt);
            }
        });

        cantones.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        cantones.setText("Cantón");

        jComboBox_cantones.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox_cantones.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jComboBox_cantones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox_cantones.setFocusable(false);
        jComboBox_cantones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_cantonesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout opcionesAgregarClienteLayout = new javax.swing.GroupLayout(opcionesAgregarCliente);
        opcionesAgregarCliente.setLayout(opcionesAgregarClienteLayout);
        opcionesAgregarClienteLayout.setHorizontalGroup(
            opcionesAgregarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(opcionesAgregarClienteLayout.createSequentialGroup()
                .addGroup(opcionesAgregarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(opcionesAgregarClienteLayout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(box_codigo_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(opcionesAgregarClienteLayout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(codigo_defectoCliente)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(opcionesAgregarClienteLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(opcionesAgregarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(correo_cliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(box_num_telefono))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(opcionesAgregarClienteLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(opcionesAgregarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(opcionesAgregarClienteLayout.createSequentialGroup()
                        .addComponent(fecha_nacimiento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(formatt_fecha_nacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(nombre_cliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(opcionesAgregarClienteLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(box_nombre_cliente)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(opcionesAgregarClienteLayout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(num_telefono)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(opcionesAgregarClienteLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(opcionesAgregarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(opcionesAgregarClienteLayout.createSequentialGroup()
                        .addComponent(distrito)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox_distritos, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(opcionesAgregarClienteLayout.createSequentialGroup()
                        .addComponent(cantones)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox_cantones, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(opcionesAgregarClienteLayout.createSequentialGroup()
                        .addComponent(provincia1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox_provincias, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(opcionesAgregarClienteLayout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(guardar_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, opcionesAgregarClienteLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(box_correo_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68))
        );
        opcionesAgregarClienteLayout.setVerticalGroup(
            opcionesAgregarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(opcionesAgregarClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(codigo_defectoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(box_codigo_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nombre_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(box_nombre_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(num_telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(box_num_telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(correo_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(box_correo_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(opcionesAgregarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(provincia1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_provincias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(opcionesAgregarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_cantones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cantones, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(opcionesAgregarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distrito, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_distritos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(opcionesAgregarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fecha_nacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(formatt_fecha_nacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(guardar_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout agregarPanelLayout = new javax.swing.GroupLayout(agregarPanel);
        agregarPanel.setLayout(agregarPanelLayout);
        agregarPanelLayout.setHorizontalGroup(
            agregarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agregarPanelLayout.createSequentialGroup()
                .addGap(302, 302, 302)
                .addGroup(agregarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(opcionesAgregarCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(crear_usuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(331, Short.MAX_VALUE))
        );
        agregarPanelLayout.setVerticalGroup(
            agregarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agregarPanelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(crear_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opcionesAgregarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        SubFrameContainer.add(agregarPanel, "card2");

        filtro_agregar.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        filtro_agregar.setText("Filtro");

        combo_filtro_agregar.setBackground(new java.awt.Color(255, 255, 255));
        combo_filtro_agregar.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        combo_filtro_agregar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Codigo", "Nombre" }));
        combo_filtro_agregar.setFocusable(false);

        buscador_agregar.setBackground(new java.awt.Color(255, 255, 255));
        buscador_agregar.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        buscador_agregar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        button_buscar_modificar.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        button_buscar_modificar.setText("B U S C A R");
        button_buscar_modificar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_buscar_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_buscar_modificarActionPerformed(evt);
            }
        });

        text_buscar_agregar.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        text_buscar_agregar.setText("Buscar un cliente para modificar");

        tabla_resultado.setBackground(new java.awt.Color(255, 255, 255));
        tabla_resultado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tabla_resultado.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        tabla_resultado.setForeground(new java.awt.Color(0, 0, 0));
        tabla_resultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "Apellidos", "Telefono", "Email", "Provincia", "Canton", "Distrito", "F. Nacimiento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_resultado.setToolTipText("");
        tabla_resultado.setFocusable(false);
        tabla_resultado.setGridColor(new java.awt.Color(0, 0, 0));
        tabla_resultado.setSelectionBackground(new java.awt.Color(204, 204, 204));
        tabla_resultado.setShowGrid(true);
        tabla_resultado.getTableHeader().setResizingAllowed(false);
        tabla_resultado.getTableHeader().setReorderingAllowed(false);
        tabla_resultado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabla_resultadoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla_resultado);
        if (tabla_resultado.getColumnModel().getColumnCount() > 0) {
            tabla_resultado.getColumnModel().getColumn(0).setResizable(false);
            tabla_resultado.getColumnModel().getColumn(1).setResizable(false);
            tabla_resultado.getColumnModel().getColumn(2).setResizable(false);
            tabla_resultado.getColumnModel().getColumn(3).setResizable(false);
            tabla_resultado.getColumnModel().getColumn(4).setResizable(false);
            tabla_resultado.getColumnModel().getColumn(5).setResizable(false);
            tabla_resultado.getColumnModel().getColumn(6).setResizable(false);
            tabla_resultado.getColumnModel().getColumn(7).setResizable(false);
            tabla_resultado.getColumnModel().getColumn(8).setResizable(false);
        }

        javax.swing.GroupLayout modificarPanelLayout = new javax.swing.GroupLayout(modificarPanel);
        modificarPanel.setLayout(modificarPanelLayout);
        modificarPanelLayout.setHorizontalGroup(
            modificarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modificarPanelLayout.createSequentialGroup()
                .addContainerGap(146, Short.MAX_VALUE)
                .addComponent(filtro_agregar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combo_filtro_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(modificarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(text_buscar_agregar)
                    .addGroup(modificarPanelLayout.createSequentialGroup()
                        .addComponent(buscador_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_buscar_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(119, 119, 119))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modificarPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 778, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        modificarPanelLayout.setVerticalGroup(
            modificarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modificarPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(text_buscar_agregar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(modificarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buscador_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_filtro_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_buscar_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filtro_agregar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(314, Short.MAX_VALUE))
        );

        SubFrameContainer.add(modificarPanel, "card4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(funciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SubFrameContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(funciones, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SubFrameContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Método para cargar provincias, cantones y distritos desde el archivo JSON usando Archivo
    private void cargarProvinciasCantonesDistritos() {
        try {
            Archivo archivo = new Archivo();
            provinciasData = (JsonNode) archivo.leerArchivo("Provincias_Cantones.json", JsonNode.class);

            // Llenar el ComboBox de provincias
            jComboBox_provincias.removeAllItems();
            provinciasData.fieldNames().forEachRemaining(provincia -> {
                jComboBox_provincias.addItem(provincia);
            });
        } catch (Exception e) {
        javax.swing.JOptionPane.showMessageDialog(this, "Error al cargar las provincias: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    
    // Método para cargar cantones según la provincia seleccionada
    private void cargarCantones(String provincia) {
        try {
            JsonNode cantonesNode = provinciasData.get(provincia).get("cantones");
            jComboBox_cantones.removeAllItems();
            if (cantonesNode != null) {
                cantonesNode.fieldNames().forEachRemaining(canton -> {
                    jComboBox_cantones.addItem(canton);
                });
            }
            // Limpiar los distritos al cambiar de cantón
            jComboBox_distritos.removeAllItems();
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error al cargar los cantones: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Método para cargar distritos según el cantón seleccionado
    private void cargarDistritos(String provincia, String canton) {
        try {
            JsonNode cantonesNode = provinciasData.get(provincia).get("cantones");
            if (cantonesNode != null && cantonesNode.has(canton)) {
                JsonNode distritosNode = cantonesNode.get(canton);
                jComboBox_distritos.removeAllItems();
                if (distritosNode.isArray()) {
                    for (JsonNode distrito : distritosNode) {
                        jComboBox_distritos.addItem(distrito.asText());
                    }
                }
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error al cargar los distritos: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    // Configuración de listeners para los ComboBox
    private void configurarListeners() {
        jComboBox_provincias.addActionListener(e -> {
            String provinciaSeleccionada = (String) jComboBox_provincias.getSelectedItem();
            if (provinciaSeleccionada != null) {
                cargarCantones(provinciaSeleccionada);
            }
        });

        jComboBox_cantones.addActionListener(e -> {
            String provinciaSeleccionada = (String) jComboBox_provincias.getSelectedItem();
            String cantonSeleccionado = (String) jComboBox_cantones.getSelectedItem();
            if (provinciaSeleccionada != null && cantonSeleccionado != null) {
                cargarDistritos(provinciaSeleccionada, cantonSeleccionado);
            }
        });
    }

    private void agregar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregar_clienteActionPerformed
        // Mostrar el SubFrame de "agregar cliente"
        java.awt.CardLayout layout = (java.awt.CardLayout) SubFrameContainer.getLayout();
        layout.show(SubFrameContainer, "agregarPanel");
    }//GEN-LAST:event_agregar_clienteActionPerformed

    private void modificar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificar_clienteActionPerformed
        // Mostrar el SubFrame de "modificar cliente"
        java.awt.CardLayout layout = (java.awt.CardLayout) SubFrameContainer.getLayout();
        layout.show(SubFrameContainer, "modificarPanel");
    }//GEN-LAST:event_modificar_clienteActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed

             // Cierra el frame actual
            this.dispose(); 

            // Abre el nuevo frame
            MenuOpciones opciones = new MenuOpciones(); // Reemplaza con el nombre de tu clase para el nuevo frame
            opciones.setVisible(true);
            opciones.setLocationRelativeTo(this);
    }//GEN-LAST:event_salirActionPerformed

    private void crear_usuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crear_usuarioActionPerformed

        boolean isVisible = opcionesAgregarCliente.isVisible();
        opcionesAgregarCliente.setVisible(!isVisible);

        // Si las opciones se hacen visibles, cargar el siguiente código
        if (!isVisible) {
            String ruta = "registroClientes.json";
            Archivo archivo = new Archivo();

            try {
                // Usar el método de Archivo para obtener el siguiente código
                int siguienteCodigo = archivo.obtenerSiguienteCodigo(ruta, Cliente[].class);
                box_codigo_cliente.setText(String.valueOf(siguienteCodigo));

            } catch (Exception e) {
                box_codigo_cliente.setText("AUTOMÁTICO");
                javax.swing.JOptionPane.showMessageDialog(this, "Error al cargar el siguiente código: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
    }

    this.revalidate();
    this.repaint();
    }//GEN-LAST:event_crear_usuarioActionPerformed

    private void box_nombre_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box_nombre_clienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_box_nombre_clienteActionPerformed

    private void box_codigo_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box_codigo_clienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_box_codigo_clienteActionPerformed
    
    void cargarClientesEnTabla() {
        String ruta = "registroClientes.json";
        Archivo archivo = new Archivo();

        try {
            Cliente[] clientes = (Cliente[]) archivo.leerArchivo(ruta, Cliente[].class);
            DefaultTableModel model = (DefaultTableModel) tabla_resultado.getModel();
            model.setRowCount(0);

            // Obtener el valor ingresado en el campo de búsqueda
            String textoBusqueda = buscador_agregar.getText().trim().toLowerCase();
            String filtroSeleccionado = (String) combo_filtro_agregar.getSelectedItem();
            boolean clienteEncontrado = false;
            if (clientes != null) {
                for (Cliente cliente : clientes) {
                    boolean coincide = false;

                    // Filtrar por nombre o código según el filtro seleccionado
                    if ("Nombre".equalsIgnoreCase(filtroSeleccionado)) {
                        String nombreCompleto = cliente.getNombre() + " " + cliente.getApellidos();
                        coincide = nombreCompleto.toLowerCase().contains(textoBusqueda);
                    } else if ("Codigo".equalsIgnoreCase(filtroSeleccionado)) {
                        coincide = String.valueOf(cliente.getCodigo()).equals(textoBusqueda);
                    }

                    // Agregar cliente a la tabla si coincide con el filtro
                    if (coincide || textoBusqueda.isEmpty()) {
                        model.addRow(new Object[]{
                        cliente.getCodigo(),
                        cliente.getNombre(),
                        cliente.getApellidos(),
                        cliente.getTelefono(),
                        cliente.getCorreo(),
                        cliente.getProvincia(),
                        cliente.getCanton(),
                        cliente.getDistrito(),
                        cliente.getFecha()
                    });
                    clienteEncontrado = true;
                }
            }
                
        }
            if(!clienteEncontrado){
                javax.swing.JOptionPane.showMessageDialog(this, "No se encontró ningún cliente con el filtro proporcionado.", "Información", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error al cargar los clientes: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    private void button_buscar_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_buscar_modificarActionPerformed
        cargarClientesEnTabla();
    }//GEN-LAST:event_button_buscar_modificarActionPerformed

    private void guardar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar_clienteActionPerformed
        String ruta = "registroClientes.json";
        Archivo archivo = new Archivo();

        try {
            String nombre = box_nombre_cliente.getText().trim();
            String[] nombres = nombre.split(" ", 2);
            if (nombre.isEmpty() || nombres.length < 2) {
                javax.swing.JOptionPane.showMessageDialog(this, "Debe ingresar el nombre completo del cliente.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            String apellidos = nombres[1].trim();

            int telefono;
            try {
                telefono = Integer.parseInt(box_num_telefono.getText().trim());
                if (!Validador.validarTelefono(telefono)) {
                    javax.swing.JOptionPane.showMessageDialog(this, "El teléfono es inválido.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                javax.swing.JOptionPane.showMessageDialog(this, "El teléfono debe ser un número válido.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }

            String correo = box_correo_cliente.getText().trim();
            if (!Validador.validarCorreo(correo)) {
                javax.swing.JOptionPane.showMessageDialog(this, "El correo tiene un formato inválido.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }

            String provincia = jComboBox_provincias.getSelectedItem().toString();
            String canton = jComboBox_cantones.getSelectedItem().toString();
            String distrito = jComboBox_distritos.getSelectedItem().toString();

            // Validar la fecha de nacimiento
            String fechaTexto = formatt_fecha_nacimiento.getText().trim();
            if (fechaTexto.isEmpty()) {
                javax.swing.JOptionPane.showMessageDialog(this, "Debe ingresar una fecha de nacimiento.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }

            java.util.Date fechaNacimiento = new SimpleDateFormat("dd/MM/yyyy").parse(fechaTexto);

            // Generar el código automáticamente
            int codigo = archivo.obtenerSiguienteCodigo(ruta, Cliente[].class);

            // Crear el cliente
            Cliente cliente = new Cliente(codigo, nombres[0], apellidos, telefono, correo, provincia, canton, distrito, fechaNacimiento);

            // Leer clientes existentes del archivo
            Cliente[] clientesExistentes = (Cliente[]) archivo.leerArchivo(ruta, Cliente[].class);
            List<Cliente> listaClientes = clientesExistentes != null 
                ? new ArrayList<>(List.of(clientesExistentes)) 
                : new ArrayList<>();

            // Agregar el nuevo cliente
            listaClientes.add(cliente);

            // Guardar la lista actualizada en el archivo
            archivo.guardarArchivo(ruta, listaClientes);

            javax.swing.JOptionPane.showMessageDialog(this, "Cliente guardado exitosamente.", "Éxito", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            // Limpiar campos
            box_nombre_cliente.setText("");
            box_num_telefono.setText("");
            box_correo_cliente.setText("");
            box_codigo_cliente.setText(String.valueOf(codigo + 1));
            formatt_fecha_nacimiento.setValue(null);

        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error al guardar el cliente: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_guardar_clienteActionPerformed

    private void tabla_resultadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla_resultadoMouseClicked
        if (evt.getClickCount() == 2 && tabla_resultado.getSelectedRow() != -1) {
            int selectedRow = tabla_resultado.getSelectedRow();
            int codigoCliente = (int) tabla_resultado.getValueAt(selectedRow, 0);
            Archivo archivo = new Archivo();
            Cliente[] clientes = (Cliente[]) archivo.leerArchivo("registroClientes.json", Cliente[].class);

            if (clientes != null) {
                for (Cliente cliente : clientes) {
                    if (cliente.getCodigo() == codigoCliente) {
                        ModificarCliente ventana = new ModificarCliente(cliente);
                        ventana.setVisible(true);
                        ventana.setLocationRelativeTo(this);
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_tabla_resultadoMouseClicked

    private void box_num_telefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box_num_telefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_box_num_telefonoActionPerformed

    private void box_correo_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box_correo_clienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_box_correo_clienteActionPerformed

    private void formatt_fecha_nacimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatt_fecha_nacimientoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formatt_fecha_nacimientoActionPerformed

    private void jComboBox_provinciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_provinciasActionPerformed
        String provinciaSeleccionada = (String) jComboBox_provincias.getSelectedItem();
        if (provinciaSeleccionada != null) {
            cargarCantones(provinciaSeleccionada);
        }
    }//GEN-LAST:event_jComboBox_provinciasActionPerformed

    private void jComboBox_cantonesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_cantonesActionPerformed
        String provinciaSeleccionada = (String) jComboBox_provincias.getSelectedItem();
        String cantonSeleccionado = (String) jComboBox_cantones.getSelectedItem();
        if (provinciaSeleccionada != null && cantonSeleccionado != null) {
            cargarDistritos(provinciaSeleccionada, cantonSeleccionado);
        }
    }//GEN-LAST:event_jComboBox_cantonesActionPerformed

    private void jComboBox_distritosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_distritosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_distritosActionPerformed

    // Método para refrescar un panel
    public void restablecerPanel(String nombrePanel) {
        java.awt.CardLayout layout = (java.awt.CardLayout) SubFrameContainer.getLayout();
        layout.show(SubFrameContainer, nombrePanel);

        // Forzar actualización visual para reflejar los cambios
        SubFrameContainer.revalidate();
        SubFrameContainer.repaint();
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistroClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistroClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistroClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistroClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistroClientes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel SubFrameContainer;
    private javax.swing.JPanel agregarPanel;
    private javax.swing.JButton agregar_cliente;
    private javax.swing.JLabel bienvenidaLabel;
    private javax.swing.JLabel bienvenidaLabel1;
    private javax.swing.JPanel bienvenidaPanel;
    private javax.swing.JTextField box_codigo_cliente;
    private javax.swing.JTextField box_correo_cliente;
    private javax.swing.JTextField box_nombre_cliente;
    private javax.swing.JTextField box_num_telefono;
    private javax.swing.JTextField buscador_agregar;
    private javax.swing.JButton button_buscar_modificar;
    private javax.swing.JLabel cantones;
    private javax.swing.JLabel codigo_defectoCliente;
    private javax.swing.JComboBox<String> combo_filtro_agregar;
    private javax.swing.JLabel correo_cliente;
    private javax.swing.JButton crear_usuario;
    private javax.swing.JLabel distrito;
    private javax.swing.JLabel fecha_nacimiento;
    private javax.swing.JLabel filtro_agregar;
    private javax.swing.JFormattedTextField formatt_fecha_nacimiento;
    private javax.swing.JToolBar funciones;
    private javax.swing.JButton guardar_cliente;
    private javax.swing.JComboBox<String> jComboBox_cantones;
    private javax.swing.JComboBox<String> jComboBox_distritos;
    private javax.swing.JComboBox<String> jComboBox_provincias;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JPanel modificarPanel;
    private javax.swing.JButton modificar_cliente;
    private javax.swing.JLabel nombre_cliente;
    private javax.swing.JLabel num_telefono;
    private javax.swing.JPanel opcionesAgregarCliente;
    private javax.swing.JLabel provincia1;
    private javax.swing.JButton salir;
    private javax.swing.JTable tabla_resultado;
    private javax.swing.JLabel text_buscar_agregar;
    private javax.swing.JLabel usuario_icon;
    // End of variables declaration//GEN-END:variables
}
